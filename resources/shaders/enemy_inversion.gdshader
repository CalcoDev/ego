shader_type canvas_item;
render_mode unshaded;

uniform sampler2D scr_tex: hint_screen_texture;

uniform float shake_power = 0.03;
uniform float shake_rate : hint_range( 0.0, 1.0 ) = 0.2;
uniform float shake_speed = 5.0;
uniform float shake_block_size = 30.5;
uniform float shake_color_rate : hint_range( 0.0, 1.0 ) = 0.01;

float random( float seed )
{
	return fract( 543.2543 * sin( dot( vec2( seed, seed ), vec2( 3525.46, -54.3415 ) ) ) );
}

void fragment() {
    float a = (1.0 - texture(TEXTURE, UV).r);
    float aa = texture(TEXTURE, UV).a;
    a = a * aa;

    	float enable_shift = float(
		random( trunc( TIME * shake_speed ) )
	<	shake_rate
	);

	vec2 fixed_uv = SCREEN_UV;
	fixed_uv.x += (
		random(
			( trunc( SCREEN_UV.y * shake_block_size ) / shake_block_size )
		+	TIME
		) - 0.5
	) * shake_power * enable_shift;
    	fixed_uv.y += (
		random(
			( trunc( SCREEN_UV.x * shake_block_size ) / shake_block_size )
		+	TIME
		) - 0.5
	) * shake_power * enable_shift;

	vec4 pixel_color = texture(scr_tex, SCREEN_UV);
	pixel_color.r = mix(
		pixel_color.r
	,	textureLod(scr_tex, fixed_uv + vec2( shake_color_rate, 0.0 ), 0.0 ).r
	,	enable_shift
	);
	pixel_color.b = mix(
		pixel_color.b
	,	textureLod(scr_tex, fixed_uv + vec2( -shake_color_rate, 0.0 ), 0.0 ).b
	,	enable_shift
	);
    	pixel_color.g = mix(
		pixel_color.r
	,	textureLod(scr_tex, fixed_uv + vec2( -shake_color_rate, 0.0 ), 0.0 ).r
	,	enable_shift
	);

    //COLOR = vec4((vec3(1.0) - pixel_color.rgb) / vec3(10.0), a);
    COLOR = vec4(pixel_color.rgb, a);

    //COLOR = vec4(texture(scr_tex, SCREEN_UV).rgb, a);
}